<!-- 
	ListPatron Native format DTD (.lip) v0.1 DRAFT

	(C) Ferry Boender, 2004
-->

<!-- list: Root node
           Contains a single list's information like state, metadata, layout and data. -->
<!ELEMENT list (info, state, filters?, sorts?, reports?, header, (rows)*) >
	<!-- info: Metadata information about the list. -->
	<!ELEMENT info (version, title?, author?, description?, keywords?) >
		<!-- version: LIP version -->
		<!ELEMENT version (#PCDATA) >
		<!-- title: The descriptive title for a list. I.e. Books. -->
		<!ELEMENT title (#PCDATA) >
		<!-- author: The list's author. No particular format required. -->
		<!ELEMENT author (#PCDATA) >
		<!-- description: A (short) description of what kind of information the list holds. -->
		<!ELEMENT description (#PCDATA) >
		<!-- keywords: A comma separated list of keywords relating to the list's data. -->
		<!ELEMENT keywords (#PCDATA) >
	<!-- state: The list's and application's state at the time of saving. -->
	<!ELEMENT state (window) >
		<!-- window: Application's window state. -->
		<!ELEMENT window (position, dimensions) >
			<!-- position: The position of the window. -->
			<!ELEMENT position (x, y) >
				<!-- x: The X (horizontal) position, in pixels, of the window relative to
				        the top-left corner of the screen. -->
				<!ELEMENT x (#PCDATA) >
				<!-- y: The Y (vertical) position, in pixels, of the window relative to 
				        the top-left corner of the screen. -->
				<!ELEMENT y (#PCDATA) >
			<!-- dimensions: The dimensions of the window. -->
			<!ELEMENT dimensions (width, height) >
				<!-- width: The width of the window in pixels. -->
				<!ELEMENT width (#PCDATA) >
				<!-- height: The height of the window in pixels. -->
				<!ELEMENT height (#PCDATA) >
	<!-- filters: A list of filters which can be applied to the list data in 
	              order to hide data which isn't of interest. -->
	<!ELEMENT filters (filter)* >
		<!-- filter: A single filter which can be applied to the list data. 
		             A filter consists out of a set of rules which are matched
					 against data in the list to see if that particular row
					 should be shown. The user can select a single filter to
					 be applied against the list. I.e. Author contains 'Vance'. -->
		<!ELEMENT filter (filtername, (rule)*) >
			<!-- name: A descriptive unique name for the filter. I.e. 'High prio todos'. -->
			<!ELEMENT filtername (#PCDATA) >
			<!-- rule: A conditional rule which is applied against rows to see
			           if they should be shown or not. A column is checked against
					   a value using predicate. I.e.
					   column 'Auhtor', predicate 'is', value 'Hitchcock'
					   column 'Age', predicate 'smaller than', value '21'. 
					   If more than one rule is specified, a row must match 
					   each rule. (AND wise operation) -->
			<!ELEMENT rule (columnname, predicate, value) >
				<!-- columnname: # ALREADY DEFINED -->
				<!-- predicate: A string which describes the check that is performed
				                against the column. Possible predicates:
								'is', 'is not', 'contains', 'does not contain',
								'larger than', 'smaller than', 'regular expression'. -->
				<!ELEMENT predicate (#PCDATA) >
				<!-- value: The value to check with. -->
				<!ELEMENT value (#PCDATA) >
	<!-- sorts: A list of sortingrules which can be applied to the list data by the 
	            user by selecting one. -->
	<!ELEMENT sorts (sort)* >
		<!-- sort: A single sortrule which can be applied to the list's data -->
		<!ELEMENT sort (sortname, sortcolumns) >
			<!-- sortname: A descriptive unique name for the sortrule -->
			<!ELEMENT sortname (#PCDATA) >
			<!-- sortcolumns: A list of columns which will be sorted. The order
			                  in which the columns appear is how the sorting takes
							  preceding. -->
			<!ELEMENT sortcolumns (columnname)* >
				<!-- columnname # ALREADY DEFINED -->
				<!-- NOTICE: The sortorder field is useless since a sortorder is already defined in 
				             columnname element -->
				<!-- sortorder: The order in which the column should be sorted. 
				                Possible sortorders: 
								'asc' : small -> large, a -> z (arrow down)
								'desc' : large -> small, z -> a (arrow up) -->
				<!-- <!ELEMENT sortorder (#PCDATA) > -->
		
	<!-- reports: A list of reports which can be generated by the user by selecting
	              one. -->
	<!ELEMENT reports (report)* >
		<!-- report: A single report which can be generated from the data in the list.
		             A report is simply a collection of a filter and a sortingrule which
					 are applied to a list and from which a report is generated. -->
		<!ELEMENT report (reportname, reporttype, filtername, sortname) >
			<!-- reportname: A descriptive unique name for the report -->
			<!ELEMENT reportname (#PCDATA) >
			<!-- type: The type of report to generate. Possible types:
			           'File' : Write the report out to a file. This can be a listpatron
					            file or any of the export possiblities.
					   'Print': Generate a hardcopy of the report.
					   'List' : Create a new listpatron list with the information in the
					            report -->
			<!ELEMENT reporttype (#PCDATA) >
			<!-- filtername: # ALREADY DEFINED -->
			<!-- sortname: # ALREADY DEFINED -->
	<!-- header: The list's header a.k.a. columnnames -->
	<!ELEMENT header (columnname)*>
		<!-- columnname: A descriptive unique name for the column -->
		<!ELEMENT columnname (#PCDATA) >
		<!-- viewposition: Position of the col in the view. Unique number. -->
		<!-- sortposition: Sequentiel number indicating the order of sorting for all columns. -->
		<!-- sortdirection: String indicating the sort direction. 'asc' or 'desc'. -->
		<!-- type: The type of column. Possible types:
		           'string', 'number', 'text', 'toggle' -->
		<!ATTLIST columnname 
			viewposition CDATA #IMPLIED
			sortposition CDATA #IMPLIED
			sortdirection CDATA #IMPLIED
			type CDATA #IMPLIED> 

	<!ELEMENT rows (row)* >
		<!ELEMENT row (column)* >
			<!ELEMENT column (#PCDATA) >
